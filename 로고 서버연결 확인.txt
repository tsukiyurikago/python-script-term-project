class Logo:
    def __init__(self, master):
        self.master = master
        self.master.attributes('-alpha', opacity)
        # The image must be stored to Tk or it will be garbage collected.
        self.master.image = tk.PhotoImage(file='resource/poker/1.png')
        self.label = tk.Label(self.master, image=self.master.image, bg='white')
        self.master.overrideredirect(True)
        self.master.geometry("+250+250")
        self.master.lift()
        self.master.wm_attributes("-topmost", True)
        self.master.wm_attributes("-disabled", True)
        self.master.wm_attributes("-transparentcolor", "white")
        self.label.pack()
        self.myTimer()

        self.isConnectionTrying = True
        self.isConnected = True
        # 공공데이터포털 API 접속 확인
        try:
            conn = http.client.HTTPConnection("dev.ndsl.kr")  # openapi.naver.comdev.ndsl.kr/openapi/service
        except:
            self.isConnected = False
        keyword = "서울"
        keyword = urllib.parse.quote(keyword)
        try:
            conn.request("GET",
                         "/openapi/service/SchlsphjrnlLocplcInfoInqireSvc/getRegstSchlshpjrnlInsttListInfo?serviceKey=pucypWLDfbEtC6UjRg%2BTBdXIpC2MNzs5iRuBns3ZhSkMD8JIA5DCkS4fojhfaQWkn%2FRiQz1%2FRphZOqKL7nC5ng%3D%3D&address={0}".format(
                             keyword))
            req = conn.getresponse()
            if (req.status != 200):
                self.isConnected = False
        except:
            self.isConnected = False


        self.isConnectionTrying = False

    def myTimer(self):
        global opacity
        global root
        self.master.attributes('-alpha', opacity)

        if opacity > 0.0 or self.isConnectionTrying == True:
            opacity -= 0.01
            self.master.after(16, self.myTimer)
        else:
            #현재 클래스에서 인스턴스로 새 tk를 만든다, 현재 tk객체는 해제한다
            self.newWindow = tk.Tk()

            if self.isConnected == False:
                self.app = ErrorWindow(self.newWindow)
            else:
            #만약 실패하면 만드는 것을 실행하지 않는다..
                self.app = TopWindow(self.newWindow)
            self.master.destroy()

class ErrorWindow:
    def __init__(self, master):
        self.master = master
        self.frame = tk.Frame(self.master)
        self.frame.pack()
        self.label = tk.Label(self.frame, text="서버연결에 실패하였습니다.")
        self.label.pack()
        self.button = tk.Button(self.frame, text="종료", command = lambda x = self.master : x.destroy() )
        self.button.pack()